import 'dotenv/config'; // Load environment variables
import { Client, GatewayIntentBits } from 'discord.js'; // Import discord.js for client initialization
import { RCEManager, LogLevel, RCEIntent } from 'rce.js'; // Import RCE components
import { setupAllListeners } from './gp/main'; // Import the new combined setup function
import { registerAllCommands } from './utils/main'; // Import the registerAllCommands function

// Initialize the Discord client
const discordClient = new Client({
  intents: [
    GatewayIntentBits.Guilds, // Required for managing guilds and interacting with guild-based events
    GatewayIntentBits.GuildMessages, // Required for handling messages in the guild
    GatewayIntentBits.MessageContent, // Required for reading the content of the messages
    GatewayIntentBits.MessageReactions, // Use this for message reactions
  ]
});

discordClient.on('ready', async () => {
  console.log(`Logged in as ${discordClient.user?.tag}`);

  // Log the intents bitfield
  console.log(`Bot intents bitfield: ${discordClient.options.intents.bitfield}`);

  // Register all commands once the bot is ready
  if (!discordClient.application) {
    console.error('Discord client application is not available.');
    process.exit(1);
  }

  try {
    console.log('Registering all commands...');
    await registerAllCommands(discordClient);
    console.log('All commands registered successfully.');
  } catch (error) {
    console.error('Error registering commands:', error);
  }
});

// Initialize the RCEManager
export const rce = new RCEManager();

async function initialize() {
  try {
    console.log('Initializing bot...');

    // Check for RCE credentials
    const rceUsername = process.env.RCE_USERNAME;
    const rcePassword = process.env.RCE_PASSWORD;

    if (!rceUsername || !rcePassword) {
      console.error('RCE_USERNAME or RCE_PASSWORD are missing from the .env file');
      process.exit(1);
    }

    // Initialize RCE
    console.log('Initializing RCE...');
    await rce.init(
      {
        username: rceUsername, // G-PORTAL username
        password: rcePassword, // G-PORTAL password
      },
      {
        level: LogLevel.Info, // Log level
        file: 'rce.log', // Log file
      }
    );
    console.log('RCE Initialized successfully');

    // Add server to RCEManager
    console.log('Adding server to RCEManager...');
    await rce.servers.add({
      identifier: 'misfits',
      serverId: 7041651, // Replace with your actual server ID
      region: 'EU',
      intents: [RCEIntent.All],
      playerRefreshing: true,
      state: ['quads', '2x'],
    });
    console.log('Server added successfully.');

    // Verify server retrieval with minimal logging
    const server = rce.servers.get('misfits');
    if (server) {
      console.log(`Server found: ${server.identifier}`);
      console.log(`Server status: ${server.status}`);
      console.log(`Players: ${server.players.length}`);
    } else {
      console.error('Server not found!');
    }

    // Initialize all RCE listeners (Player Joined & Player Left)
    console.log('Setting up player event listeners...');
    setupAllListeners();
    console.log('Player event listeners set up successfully.');

    // Log in to Discord
    console.log('Logging in to Discord...');
    await discordClient.login(process.env.BOT_TOKEN);
    console.log('Logged in to Discord successfully!');
  } catch (error) {
    console.error('Error initializing the bot:', error);
    process.exit(1); // Exit with error
  }
}

// Run the initialization
initialize();

// Export the initialized discordClient (renaming if necessary)
export const client = discordClient;
